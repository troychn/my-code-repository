<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>
                <property name="writeAcceptCharset" value="true"/>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes" value="application/json;charset=UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean id="loginInterceptor" class="com.edu.common.controller.manager.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
    <context:component-scan base-package="com.edu" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--
        default-servlet-handler 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler,
        它会对进入 DispatcherServlet 的请求进行筛查, 如果发现是没有经过映射的请求, 就将该请求交由 WEB 应用服务器默认的
        Servlet 处理. 如果不是静态资源的请求，才由 DispatcherServlet 继续处理
        一般 WEB 应用服务器默认的 Servlet 的名称都是 default.
        若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定
     -->
    <mvc:default-servlet-handler/>
   <!-- 注册视图解析器 -->
   <bean id="internalResourceViewResolver"
         class="org.springframework.web.servlet.view.InternalResourceViewResolver">
          <!-- 通过setter方法注入前缀 -->
          <property name="prefix" value="/"/>
          <!-- 通过setter方法注入后缀 -->
          <property name="suffix" value=".jsp"/>
   </bean>
   <bean id="multipartResolver"  
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件大小的参数 -->
		<property name="maxUploadSize" value="10485760"/>
		<property name="defaultEncoding" value="utf-8" />
		<property name="uploadTempDir" value="upload/temp" />  
	</bean>  
</beans>



















